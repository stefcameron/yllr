{"version":3,"file":"yllr.min.js","sources":["yllr.js"],"names":["global","factory","libName","define","amd","module","exports","this","DEFAULT_MESSAGE","TYPE_EMPTY","YllrError","SuperConstructor","Error","message","tokens","call","name","forEach","token","i","replace","bind","prototype","Object","create","constructor","__errorType","__checksEnabled","check","condition","params","slice","arguments","length","toString","setErrorType","errorType","enableChecks","enable","undefined","checksEnabled","config"],"mappings":";;;;CAIA,SAAUA,EAAQC,GAChB,YAEA,IAAIC,GAAU,MAEQ,mBAAXC,SAAyBA,OAAOC,IACzCD,OAAOD,KAAaD,GACO,gBAAXI,SAAiD,gBAAnBA,QAAOC,QACrDD,OAAOC,QAAUL,IAEjBD,EAAOE,GAAWD,KAEnBM,KAAM,WACP,YAIA,IAAIC,GAAkB,oBAIlBC,EAAa,UAGbC,EAAY,WACd,GAAIC,GAAmBC,MAanBF,EAAY,SAASG,EAASC,GAChCH,EAAiBI,KAAKR,MAEtBA,KAAKM,QAAUA,EACfN,KAAKS,KAAO,YAEZF,EAASA,MACTA,EAAOG,QAAQ,SAASC,EAAOC,GAC7BZ,KAAKM,QAAUN,KAAKM,QAAQO,QAAQ,IAAMD,EAAI,IAAK,IACpC,KAAVD,EAAeT,EAAaS,KACjCG,KAAKd,OAMT,OAHAG,GAAUY,UAAYC,OAAOC,OAAOb,EAAiBW,WACrDZ,EAAUY,UAAUG,YAAcf,EAE3BA,KAMLgB,EAAchB,EAKdiB,GAAkB,EAsBlBC,EAAQ,SAASC,EAAWhB,GAC9B,GAAIiB,GACAhB,CAEJ,IAAIa,IAAoBE,EAatB,KAZAC,MAAYC,MAAMhB,KAAKiB,WACD,IAAlBF,EAAOG,OAEPnB,EADgD,mBAA9CS,OAAOD,UAAUY,SAASnB,KAAKe,EAAO,IAC/BA,EAAO,IAENA,EAAO,IAEVA,EAAOG,OAAS,IAEzBnB,EAASgB,EAAOC,MAAM,IAGlB,GAAIL,GAAYb,GAAWL,EAAiBM,IAYlDqB,EAAe,SAASC,GAC1BR,GAAOQ,GAAkC,kBAAdA,GACvB,yCAEJV,EAAgBU,EAAYA,EAAY1B,GAWtC2B,EAAe,SAASC,GAC1BX,EAA6BY,SAAXD,KAA0BA,GAS1CE,EAAgB,WAClB,MAAOb,GAOT,QAEEjB,UAAWA,EAGXkB,MAAOA,EAMPa,QAEEN,aAAcA,EACdE,aAAcA,EACdG,cAAeA","sourcesContent":["/*!\n * yllr 0.0.3\n * @license MIT, https://github.com/stefcameron/yllr/blob/master/LICENSE\n */\n(function(global, factory) {\n  'use strict';\n\n  var libName = 'yllr';\n\n  if (typeof define === 'function' && define.amd) {\n    define(libName, [], factory); // AMD\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory(); // CommonJS\n  } else {\n    global[libName] = factory(); // Global\n  }\n})(this, function() {\n  'use strict';\n\n  // Default message to display if one isn't provided for a `check()`.\n  // @type {String}\n  var DEFAULT_MESSAGE = 'runtime assertion';\n\n  // Representation of an empty string passed as a token in `check()`.\n  // @type {String}\n  var TYPE_EMPTY = '<empty>';\n\n  // @type {Function}\n  var YllrError = (function() {\n    var SuperConstructor = Error;\n\n    /**\n     * [[extends: `JavaScript.Error`]]\n     * Defines the error that is thrown by default when a check fails.\n     *  `error.name` is set to `yllrError`.\n     * @class yllr.YllrError\n     * @param {String} message The error message.\n     * @param {Array.<String>} [tokens] Optional tokens to substitute into the\n     *  `message` specified. If tokens are provided, `message` is expected to\n     *  contain substitution tokens using the `{n}` syntax where `n` is a zero-based\n     *  index matching a token string found in `tokens`.\n     */\n    var YllrError = function(message, tokens) {\n      SuperConstructor.call(this);\n\n      this.message = message;\n      this.name = 'yllrError';\n\n      tokens = tokens || []; // normalize\n      tokens.forEach(function(token, i) {\n        this.message = this.message.replace('{' + i + '}', '' +\n            (token === '' ? TYPE_EMPTY : token));\n      }.bind(this));\n    };\n\n    YllrError.prototype = Object.create(SuperConstructor.prototype);\n    YllrError.prototype.constructor = YllrError;\n\n    return YllrError;\n  })();\n\n  // Type of error to throw when a check fails. Defaults to `yllr.YllrError`.\n  // @type {Function}\n  // @see #setErrorType()\n  var __errorType = YllrError;\n\n  // `true` if failed checks should result in failures; `false` if checks should\n  //  be ignored.\n  // @type\n  var __checksEnabled = true;\n\n  /**\n   * Perform a runtime check.\n   * @function yllr.check\n   * @param {*} condition Condition to check. If _truthy_, the check passes and\n   *  nothing happens. If _falsy_, the check fails, causing a new error to be\n   *  thrown with the specified message.\n   * @param {String} [message] Optional message. A generic message is used if\n   *  one is not provided.\n   * @param {...String} [tokens] Optional substitution tokens for the\n   *  `message`, passed to the generated error. This can be specified either as\n   *  a _single_ `Array.<String>` parameter (in which case each element is considered\n   *  to be a token), or as multiple parameters (in which case arrays are treated\n   *  as tokens, not their elements).\n   *\n   *  When using the single array parameter, an array can be passed as a single\n   *   token by wrapping it in the token array: `[[1, 2, 3], 'a']` would result\n   *   in two tokens, the first being an `Array.<Number>` and the second being\n   *   a `String`. This is the exception if you need to pass one token and it\n   *   happens to be an array.\n   */\n  var check = function(condition, message) {\n    var params; // Array.<Object>\n    var tokens; // Array.<Object> (should be strings)\n\n    if (__checksEnabled && !condition) {\n      params = [].slice.call(arguments);\n      if (params.length === 3) {\n        if (Object.prototype.toString.call(params[2]) === '[object Array]') {\n          tokens = params[2]; // token array specified\n        } else {\n          tokens = [params[2]]; // some other type: consider it a token\n        }\n      } else if (params.length > 3) {\n        // list of tokens\n        tokens = params.slice(2);\n      }\n\n      throw new __errorType(message || DEFAULT_MESSAGE, tokens);\n    }\n  };\n\n  /**\n   * Customizes the type of error thrown when a `check` fails.\n   * @function yllr.config.setErrorType\n   * @param {Function} [errorType] If specified, expected to be a constructor\n   *  function which has the same signature as the default `YllrError`. If\n   *  falsy, resets the error type to `YllrError`.\n   * @see {@link yllr.YllrError `yllr.YllrError`}\n   */\n  var setErrorType = function(errorType) {\n    check(!errorType || typeof errorType === 'function',\n        'errorType must be falsy or a function');\n\n    __errorType = !!errorType ? errorType : YllrError;\n  };\n\n  /**\n   * Allows enabling or disabling all checks. Subsequent calls to `yllr.check`\n   *  will cause failures if enabled, or do nothing if disabled.\n   * @function yllr.config.enableChecks\n   * @param {Boolean} [enable=true] If _truthy_ (or unspecified), checks are\n   *  enabled; otherwise, checks are disabled.\n   * @see {@link yllr.config.checksEnabled `yllr.config.checksEnabled()`}\n   */\n  var enableChecks = function(enable) {\n    __checksEnabled = enable === undefined || !!enable;\n  };\n\n  /**\n   * Determines if all checks are enabled; a compliment to `config.enableChecks()`.\n   * @function yllr.config.checksEnabled\n   * @returns {Boolean} `true` if all checks are enabled; `false` otherwise.\n   * @see {@link yllr.config.enableChecks `yllr.config.enableChecks()`}\n   */\n  var checksEnabled = function() {\n    return __checksEnabled;\n  };\n\n  /**\n   * The `yllr` library.\n   * @namespace yllr\n   */\n  return {\n    // types\n    YllrError: YllrError,\n\n    // functions\n    check: check,\n\n    /**\n     * Configuration options.\n     * @namespace yllr.config\n     */\n    config: {\n      // functions\n      setErrorType: setErrorType,\n      enableChecks: enableChecks,\n      checksEnabled: checksEnabled\n    }\n  };\n});\n"]}